
"use client";

import React, { useState, useMemo, useCallback } from 'react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { ShieldAlert, ExternalLink, Trash2, UserPlus, Copy, ShieldPlus, X } from "lucide-react";
import { useToast } from "@/hooks/use-toast";

interface AclEntry {
  role: string;
  members: string[];
}

const INITIAL_ACLS: AclEntry[] = [
  { role: 'admin', members: ['admin@example.com'] },
  { role: 'editor', members: ['editor@example.com', 'auditor@example.com'] },
  { role: 'viewer', members: ['viewer@example.com'] },
];

const generateRules = (acls: AclEntry[]): string => {
  const rolesToMembers = JSON.stringify(
    acls.reduce((acc, acl) => {
      acc[acl.role] = acl.members;
      return acc;
    }, {} as Record<string, string[]>),
    null,
    2
  );

  const capitalize = (s: string) => s.charAt(0).toUpperCase() + s.slice(1);

  return `rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- ACL Configuration (Generated by the App) ---
    let roles = ${rolesToMembers.replace(/\n/g, '\n    ')};

    // --- Helper Functions (Generated by the App) ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
${acls
  .map(
    (acl) => `
    function is${capitalize(acl.role)}() {
      return isSignedIn() && (request.auth.token.email in roles['${acl.role}']);
    }`
  )
  .join('\n')}

    // --- Example Security Rules ---
    // Modify these rules to fit your application's needs.

    // Collection 'users': Only the user themselves or an admin can read/write their data.
    match /users/{userId} {
      allow read, write: if isUser(userId) || isAdmin();
    }

    // Collection 'actions': Any signed-in user can read.
    // Editors and Admins can create/update. Only Admins can delete.
    match /actions/{actionId} {
      allow read: if isSignedIn();
      allow create, update: if isEditor() || isAdmin();
      allow delete: if isAdmin();
    }

    // Default deny rule for any other collection.
    match /{document=**} {
       allow read, write: if isAdmin(); // Admins can access everything else
    }
  }
}
`;
};

export default function FirestoreRulesGeneratorPage() {
  const [acls, setAcls] = useState<AclEntry[]>(INITIAL_ACLS);
  const [newRole, setNewRole] = useState('');
  const [newMembers, setNewMembers] = useState<Record<string, string>>({});
  const { toast } = useToast();

  const generatedRules = useMemo(() => generateRules(acls), [acls]);

  const handleAddRole = () => {
    if (newRole && !acls.some(acl => acl.role.toLowerCase() === newRole.toLowerCase())) {
      setAcls([...acls, { role: newRole.toLowerCase(), members: [] }]);
      setNewRole('');
       toast({ title: "Rol añadido", description: `Se ha creado el rol "${newRole.toLowerCase()}".` });
    }
  };

  const handleDeleteRole = (role: string) => {
    setAcls(acls.filter(acl => acl.role !== role));
    toast({ title: "Rol eliminado", description: `Se ha eliminado el rol "${role}".`, variant: 'destructive' });
  };

  const handleAddMember = (role: string) => {
    const member = newMembers[role]?.trim();
    if (member) {
      const updatedAcls = acls.map(acl => {
        if (acl.role === role && !acl.members.includes(member)) {
          return { ...acl, members: [...acl.members, member] };
        }
        return acl;
      });
      setAcls(updatedAcls);
      setNewMembers({ ...newMembers, [role]: '' });
    }
  };

  const handleDeleteMember = (role: string, member: string) => {
    const updatedAcls = acls.map(acl => {
      if (acl.role === role) {
        return { ...acl, members: acl.members.filter(m => m !== member) };
      }
      return acl;
    });
    setAcls(updatedAcls);
  };
  
  const copyToClipboard = useCallback(() => {
    navigator.clipboard.writeText(generatedRules).then(() => {
      toast({ title: "Copiado al portapapeles", description: "Las reglas de Firestore se han copiado correctamente." });
    }, () => {
      toast({ title: "Error", description: "No se pudieron copiar las reglas.", variant: "destructive" });
    });
  }, [generatedRules, toast]);

  return (
    <div className="grid gap-6 lg:grid-cols-2 xl:grid-cols-5">
      <div className="space-y-6 xl:col-span-2">
        <Card>
          <CardHeader>
            <CardTitle>Editor de Listas de Control de Acceso (ACL)</CardTitle>
            <CardDescription>
              Define roles y asigna usuarios o grupos. Las reglas se generarán automáticamente.
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            {acls.map(acl => (
              <div key={acl.role} className="p-3 border rounded-lg">
                <div className="flex justify-between items-center mb-2">
                  <h4 className="font-semibold text-primary">{acl.role.charAt(0).toUpperCase() + acl.role.slice(1)}</h4>
                  <Button variant="ghost" size="icon" className="h-7 w-7 text-muted-foreground" onClick={() => handleDeleteRole(acl.role)}><Trash2 className="h-4 w-4" /></Button>
                </div>
                <div className="space-y-2">
                    {acl.members.map(member => (
                        <div key={member} className="flex items-center justify-between text-sm bg-muted/50 p-2 rounded-md">
                            <span>{member}</span>
                            <Button variant="ghost" size="icon" className="h-6 w-6" onClick={() => handleDeleteMember(acl.role, member)}><X className="h-3 w-3" /></Button>
                        </div>
                    ))}
                     {acl.members.length === 0 && <p className='text-xs text-muted-foreground text-center p-2'>No hay miembros en este rol.</p>}
                </div>
                <div className="flex gap-2 mt-3">
                  <Input
                    placeholder="email@ejemplo.com o grupo:nombre"
                    value={newMembers[acl.role] || ''}
                    onChange={e => setNewMembers({ ...newMembers, [acl.role]: e.target.value })}
                    onKeyDown={e => e.key === 'Enter' && handleAddMember(acl.role)}
                  />
                  <Button onClick={() => handleAddMember(acl.role)}><UserPlus className="h-4 w-4 mr-2"/>Añadir</Button>
                </div>
              </div>
            ))}
             <div className="flex gap-2 pt-4">
                  <Input placeholder="Nombre del nuevo rol (e.g. facturacion)" value={newRole} onChange={e => setNewRole(e.target.value)} onKeyDown={e => e.key === 'Enter' && handleAddRole()}/>
                  <Button variant="outline" onClick={handleAddRole}><ShieldPlus className="h-4 w-4 mr-2"/>Crear Rol</Button>
                </div>
          </CardContent>
        </Card>
      </div>

      <div className="xl:col-span-3 space-y-6">
        <Card className="h-fit sticky top-6">
            <CardHeader className="flex-row justify-between items-start">
                <div>
                    <CardTitle>Reglas de Firestore Generadas</CardTitle>
                    <CardDescription>Copia y pega este código en tu Consola de Firebase.</CardDescription>
                </div>
                <Button onClick={copyToClipboard}><Copy className="h-4 w-4 mr-2" />Copiar Regles</Button>
            </CardHeader>
            <CardContent>
            <pre className="p-4 bg-gray-900 text-white rounded-md overflow-x-auto text-sm h-[600px]">
                <code>{generatedRules}</code>
            </pre>
            </CardContent>
        </Card>
         <Alert>
            <ShieldAlert className="h-4 w-4" />
            <AlertTitle>¡Acción Manual Requerida!</AlertTitle>
            <AlertDescription>
            <p>Este generador <strong>no aplica</strong> las reglas automáticamente. Debes copiarlas y pegarlas en la sección de Reglas de Firestore de tu proyecto.</p>
            <a
                href="https://console.firebase.google.com/"
                target="_blank"
                rel="noopener noreferrer"
                className="mt-2 inline-flex items-center gap-2 text-sm font-semibold text-blue-600 hover:underline"
            >
                Ir a la Consola de Firebase <ExternalLink className="h-4 w-4" />
            </a>
            </AlertDescription>
      </Alert>
      </div>
    </div>
  );
}
